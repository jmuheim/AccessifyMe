== render "shared/breadcrumbs", items: [["Learn", learn_path], ["Virtues", virtues_path], ["##{@virtue.id}: " + @virtue.short_name, virtue_path(@virtue)]]

article.virtue id=dom_id(@virtue)
  h2
    sup: small> ##{@virtue.id}
    =< @virtue.name

  / hr
  /
  / = render "offers", virtue: @virtue
  / = render "inspires", virtue: @virtue
  /
  / hr

  h3.sr-only General introduction 👨🏼‍🏫

  figure.video_player
    == far_icon(:play_circle)
    = introduction_image_tag(@virtue)

  .horizontal-tags
    ul
      li
        strong> Duration:
        | 5:27"
      li
        strong Level:
        =< link_to "Beginners"
      li
        strong Published:
        =<> time_ago_in_words(@virtue.created_at)
        | ago

  / h2.visually_hidden Transcript and slides
  /
  / ul
  /   li
  /     / == material_icon.description
  /     | Transcript:
  /     =< link_to video_transcript_path(@video)
  /       => visually_hidden("View transcript as")
  /       | HTML
  /     |,
  /     =< link_to video_transcript_path(@video, format: :pdf)
  /       => visually_hidden("Download transcript as")
  /       | PDF
  /   li
  /     / == material_icon.slideshow
  /     | Slides:
  /     =< link_to video_slides_path(@video, format: :keynote)
  /       => visually_hidden("Download slides as")
  /       | Keynote
  /     |,
  /     =< link_to video_slides_path(@video, format: :pdf)
  /       => visually_hidden("Download slides as")
  /       | PDF

  blockquote
    = markdown(@virtue.intent)

  section.insights
    h3.sr-only = Insight.model_name.human(count: @virtue.insights.count)

    / Ggf. noch unterscheiden nach Focusability und Operability?

    form action=virtues_path
      p
        | Showing <strong>#{@virtue.insights.count} of #{@virtue.insights.count}</strong> insights for

        select<> name="role"
          option value="" All roles
          - Role.all.each do |role|
            option value=role.slug selected=(params[:role] == role.slug) #{role.name} #{role.icon}

        | and

        select<> name="role"
          option value="" All expertise levels
          option value="" selected="true" Beginners 🐣
          option value="" Intermediates 💪

        button Go

    - @virtue.insights.each do |insight|
      article.insight.video_small id=dom_id(insight)
        .two_columns
          .left
            h4 = insight.name

            blockquote
              | "#{insight.general_value}"

          .right
            figure.video_player
              = far_icon('play-circle')
              = introduction_image_tag(@virtue)

        / - Pattern.do_or_dont.values.each do |type|
        /   - patterns = insight.patterns.send(type)
        /   - if patterns.any?
        /     details.patterns class=type
        /       summary
        /         h5
        /           => patterns.count
        /           => Pattern.do_or_dont.send(type).text.pluralize
        /
        /           sup
        /             | with
        /             mark<> ? demos
        /             | and
        /             mark< class=(type == :do ? :green : :red)
        /               | ? #{type == :do ? "wins" : "fails"}
        /
        /       - patterns.each_with_index do |pattern, i|
        /         hr
        /
        /         article.pattern id=dom_id(pattern)
        /           .two_columns
        /             .left
        /               h6
        /                 = do_or_dont_icon(pattern)
        /                 = link_to pattern
        /                   = inline_markdown(pattern.name)
        /
        /               = markdown(pattern.description)
        /
        /               .horizontal-tags
        /                 ul
        /                   li
        /                     strong> Demos:
        /                     mark = pattern.bloopers.demos.count
        /                   li
        /                     strong> Real world:
        /
        /                     mark class=(pattern.do? ? :green : :red) #{pattern.bloopers.real.count}
        /
        /             .right
        /               figure.video_player
        /                 = far_icon('play-circle')
        /                 = image_tag("Accessify.me-main-title", alt: "Accessify.me main title slide")

  h2 Used tools 🛠

  p The following tools have proven useful when developing for and testing keyboard-only accessibility:

  / ul
  /   - @video.video_to_tools.each do |through|
  /     li
  /       / == material_icon.send(through.tool.icon)
  /       =<> link_to through.tool.name, through.tool
  /       | to
  /       =< through.purpose

  h2 Related <abbr title="Web Content Accessibility Guidelines">WCAG</abbr> criteria 📜

  p
    label
      | WCAG level:&nbsp;
      select
        option A
        option selected=true AA
        option AAA

  / ul
  /   - @video.video_to_wcag_elements.each do |through|
  /     li
  /       =<> link_to through.wcag_element.name_with_tree_prefix, through.wcag_element
  /       =< through.wcag_element.explains_why

  h2 Reactions 🙋‍♀️🙋‍♂️

  p The following people benefit tremendously from keyboard-only accessibility:

  ul
    li #{link_to 'Petra Ritter'}, who cannot use a mouse due to ???.
    li #{link_to 'Oldtimer Bill'}, who suffers from tremors (shaking hands) due to Parkinson's Disease.
    li Power users

  / h2 External resources 📍
  /
  / h3 Written
  /
  / h3 Videos

/ nav ara-label="Video management"
/   ul
/     li = link_to "Edit this virtue", edit_virtue_path(@virtue)
/     li = link_to "Back to virtues", @virtues_path
/     li = button_to "Destroy this virtue", @virtue, method: :delete
